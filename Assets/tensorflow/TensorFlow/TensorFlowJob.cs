using Assets.TensorFlow.Scripts.Utils;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Assets.Scripts.TensorFlow
{
    public class TensorFlowJob : ThreadedJob
    {

        public Texture2D targetMaterialDist; //the texture form the image generated by Pix2Pix

        private string pix2pixLocation;
        private string tfmodelPath;
        private string inputFilePath; 

        private int TextureSize= 256;

        private string tensorFlowLog;
        private string exceptionLogs;
        private int exitCode;
        private TimeSpan ts;


        public TensorFlowJob(string pix2pixLocation, string tfmodelPath, string inputFilePath)
        {
            this.pix2pixLocation = pix2pixLocation;
            this.tfmodelPath = tfmodelPath;
            this.inputFilePath = inputFilePath;
        }


        /// <summary>
        /// Does the threaded task. DON'T use the Unity API here!
        /// </summary>
        protected override void ThreadFunction()
        {
            
            try
            {
                Stopwatch stopWatch = new Stopwatch();
                stopWatch.Start();

                string arguments = string.Format("server/tools/process-remote.py --input_file {0} --url http://localhost:8000/checkpoint --output_file models/output.png", inputFilePath);
                tensorFlowLog = arguments;
                exitCode = RunConsoleApp.RunAndWait(arguments, "python", pix2pixLocation, out tensorFlowLog);

                stopWatch.Stop();
                // Get the elapsed time as a TimeSpan value.
                ts = stopWatch.Elapsed;
            }
            catch (Exception e)
            {
                exceptionLogs = e.ToString();
            }
        }
        /// <summary>
        /// This is executed by the Unity main thread when the job is finished
        /// </summary>
        protected override void OnFinished()
        {
           
            if (exitCode == 0)
            {
                string filePath =  Path.Combine(tfmodelPath, "output.png");
                targetMaterialDist = LoadTexture(filePath, TextureSize, TextureSize);


                // Format and display the TimeSpan value.
                string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",
                    ts.Hours, ts.Minutes, ts.Seconds,
                    ts.Milliseconds / 10);

                UnityEngine.Debug.Log("RunTime " + elapsedTime);

            }
            else
                UnityEngine.Debug.Log(tensorFlowLog);
        }

        public Texture2D LoadTexture(string filePath, int width, int height)
        {

            Texture2D tex = null;

            try
            {
                var bytes = File.ReadAllBytes(filePath);
                tex = new Texture2D(width, height);
                tex.LoadImage(bytes); //..this will auto-resize the texture dimensions.
   
            }
            catch (Exception e)
            {
                UnityEngine.Debug.Log(e.ToString());
            }
            return tex;
        }    
    }
}
